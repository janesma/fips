# -*- makefile -*-

include Makefile.release

# Smash together user's values with values from Makefile.config
FIPS_CFLAGS = -DFIPS_VERSION=$(VERSION) $(CFLAGS) $(WARN_CFLAGS) $(TALLOC_CFLAGS) $(LIBELF_CFLAGS) $(extra_cflags)
FIPS_LDFLAGS = $(LDFLAGS) $(AS_NEEDED_LDFLAGS) $(TALLOC_LDFLAGS) $(LIBELF_LDFLAGS) 

LIBFIPS_CFLAGS = $(CFLAGS) $(WARN_CFLAGS) $(GL_CFLAGS) $(EGL_CFLAGS) $(extra_cflags)
LIBFIPS_LDFLAGS = $(LDFLAGS) -ldl

FIPS_LINKER = CC

ALL_TARGETS = fips

LIB_64_SYMLINKS = $(LIB64_DIR)/libGL.so $(LIB64_DIR)/libEGL.so $(LIB64_DIR)/libEGL.so.1
LIB_32_SYMLINKS = $(LIB32_DIR)/libGL.so $(LIB32_DIR)/libEGL.so $(LIB32_DIR)/libEGL.so.1

ifeq ($(COMPILER_SUPPORTS_32),Yes)
ALL_TARGETS += libfips-32.so fips-find-lib-32 $(LIB32_DIR)/libGL.so.1 $(LIB_32_SYMLINKS) $(GRAFIPS_32_LIB)
endif

ifeq ($(COMPILER_SUPPORTS_64),Yes)
ALL_TARGETS += libfips-64.so fips-find-lib-64 $(LIB64_DIR)/libGL.so.1 $(LIB_64_SYMLINKS) $(GRAFIPS_64_LIB)
endif

.PHONY: all
all: $(ALL_TARGETS)

ifeq ($(MAKECMDGOALS),)
ifeq ($(shell cat .first-build-message 2>/dev/null),)
	@FIPS_FIRST_BUILD=1 $(MAKE) --no-print-directory all
	@echo ""
	@echo "Compilation of fips is now complete. You can install fips with:"
	@echo ""
	@echo "	make install"
	@echo ""
	@echo "Note that depending on the prefix to which you are installing"
	@echo "you may need root permission (such as \"sudo make install\")."
	@echo "See \"./configure --help\" for help on setting an alternate prefix."
	@echo Printed > .first-build-message
endif
endif

# The user has not set any verbosity, default to quiet mode and inform the
# user how to enable verbose compiles.
ifeq ($(V),)
quiet_DOC := "Use \"$(MAKE) V=1\" to see the verbose compile lines.\n"
quiet = @printf $(quiet_DOC)$(eval quiet_DOC:=)"$1 $@\n"; $($(shell echo $1 | sed -e s'/ .*//'))
endif
# The user has explicitly enabled quiet compilation.
ifeq ($(V),0)
quiet = @printf "$1 $@\n"; $($(shell echo $1 | sed -e s'/ .*//'))
endif
# Otherwise, print the full command line.
quiet ?= $($(shell echo $1 | sed -e s'/ .*//'))

%-32.o: %.c $(global_deps)
	@mkdir -p .deps/$(@D)
	$(call quiet,CC $(CFLAGS) -m32) -c $(LIBFIPS_CFLAGS) -m32 $< -o $@ -MD -MP -MF .deps/$*.d

%-64.o: %.c $(global_deps)
	@mkdir -p .deps/$(@D)
	$(call quiet,CC $(CFLAGS) -m64) -c $(LIBFIPS_CFLAGS) -m64 $< -o $@ -MD -MP -MF .deps/$*.d

%.o: %.c $(global_deps)
	@mkdir -p .deps/$(@D)
	$(call quiet,CC $(CFLAGS)) -c $(FIPS_CFLAGS) $< -o $@ -MD -MP -MF .deps/$*.d

.PHONY : clean
clean:
	rm -rf $(CLEAN); rm -rf .deps

.PHONY: distclean
distclean: clean
	rm -rf $(DISTCLEAN)

# Main program, fips

fips_srcs = \
	execute.c \
	fips.c \
	xmalloc.c

fips_modules = $(fips_srcs:.c=.o)

fips: $(fips_modules)
	$(call quiet,$(FIPS_LINKER) $(CFLAGS)) $(FIPS_CFLAGS) $^ $(FIPS_LDFLAGS) -lpthread -o $@

# GL-wrapper library, libfips
LIBRARY_LINK_FLAGS = -shared -Wl,--version-script=libfips.sym

extra_cflags += -I$(srcdir) -I$(srcdir)/grafips -I$(srcdir)/grafips/os -I$(srcdir)/grafips/remote -I$(srcdir)/grafips/sources -I$(srcdir)/grafips/controls -I$(srcdir)/grafips/error -fPIC

libfips_srcs = \
	context.c \
	fips-dispatch.c \
	fips-dispatch-gl.c \
	glwrap.c \
	glxwrap.c \
	metrics.c \
	metrics-info.c \
	xmalloc.c

ifeq ($(HAVE_EGL),Yes)
libfips_srcs += eglwrap.c
endif

$(LIB_64_SYMLINKS) : $(LIB64_DIR)/libGL.so.1
	rm -f $@
	ln -s libGL.so.1 $@

$(LIB_32_SYMLINKS) : $(LIB32_DIR)/libGL.so.1
	rm -f $@
	ln -s libGL.so.1 $@

libfips.sym: extract-wrapped-symbols $(libfips_srcs)
	$(call quiet,extract-wrapped-symbols) ./extract-wrapped-symbols $(libfips_srcs) > $@

libfips_32_modules = $(libfips_srcs:.c=-32.o)

libfips_64_modules = $(libfips_srcs:.c=-64.o)

libfips-32.so: $(libfips_32_modules) libfips.sym $(GRAFIPS_32_LIB)
	$(call quiet,$(FIPS_LINKER) $(CFLAGS) -m32) -o $@ $(LIBFIPS_CFLAGS) -m32 $(libfips_32_modules)  $(LIBRARY_LINK_FLAGS) $(GRAFIPS_32_LDFLAGS) $(LIBFIPS_LDFLAGS)

libfips-64.so: $(libfips_64_modules) libfips.sym $(GRAFIPS_64_LIB)
	$(call quiet,$(FIPS_LINKER) $(CFLAGS) -m64) -o $@ $(LIBFIPS_CFLAGS) -m64 $(libfips_64_modules) $(LIBRARY_LINK_FLAGS) $(GRAFIPS_64_LDFLAGS) $(LIBFIPS_LDFLAGS)

fips-find-lib-32: fips-find-lib.c
	$(CC) $(FIPS_CFLAGS) -m32 -fPIC -o $@ $< -ldl

fips-find-lib-64: fips-find-lib.c
	$(CC) $(FIPS_CFLAGS) -m64 -fPIC -o $@ $< -ldl

$(LIB64_DIR)/libGL.so.1: fips-gl.c $(SPECS)
	mkdir -p $(LIB64_DIR)
	$(CC) $(FIPS_CFLAGS) -m64 -fPIC -shared -Wl,-Bsymbolic -o $@ $<

$(LIB32_DIR)/libGL.so.1: fips-gl.c $(SPECS)
	mkdir -p $(LIB32_DIR)
	$(CC) $(FIPS_CFLAGS) -m32 -fPIC -shared -Wl,-Bsymbolic -o $@ $<

.PHONY: install
install: all
	mkdir -p $(DESTDIR)$(bindir)
	install fips $(DESTDIR)$(bindir)/fips
	mkdir -p $(DESTDIR)$(libdir)/fips
ifeq ($(COMPILER_SUPPORTS_32), Yes)
	mkdir -p $(DESTDIR)$(libdir)/fips/$(LIB32_DIR)
	install -m0644 $(LIB32_DIR)/libGL.so.1 $(DESTDIR)$(libdir)/fips/$(LIB32_DIR)
	ln -sf libGL.so.1 $(DESTDIR)$(libdir)/fips/$(LIB32_DIR)/libGL.so
	ln -sf libGL.so.1 $(DESTDIR)$(libdir)/fips/$(LIB32_DIR)/libEGL.so
	ln -sf libGL.so.1 $(DESTDIR)$(libdir)/fips/$(LIB32_DIR)/libEGL.so.1

	install -m0644 libfips-32.so $(DESTDIR)$(libdir)/fips/libfips-32.so
	install fips-find-lib-32 $(DESTDIR)$(bindir)/fips-find-lib-32
endif
ifeq ($(COMPILER_SUPPORTS_64), Yes)
	mkdir -p $(DESTDIR)$(libdir)/fips/$(LIB64_DIR)
	install -m0644 $(LIB64_DIR)/libGL.so.1 $(DESTDIR)$(libdir)/fips/$(LIB64_DIR)
	ln -sf libGL.so.1 $(DESTDIR)$(libdir)/fips/$(LIB64_DIR)/libGL.so
	ln -sf libGL.so.1 $(DESTDIR)$(libdir)/fips/$(LIB64_DIR)/libEGL.so
	ln -sf libGL.so.1 $(DESTDIR)$(libdir)/fips/$(LIB64_DIR)/libEGL.so.1

	install -m0644 libfips-64.so $(DESTDIR)$(libdir)/fips/libfips-64.so
	install fips-find-lib-64 $(DESTDIR)$(bindir)/fips-find-lib-64
endif
ifeq ($(MAKECMDGOALS), install)
	@echo ""
	@echo "Fips is now installed to $(DESTDIR)$(prefix)"
	@echo ""
endif

SRCS  := $(SRCS) $(fips_srcs) $(libfips_srcs)
CLEAN := $(CLEAN) fips *.o *.a *pb.cc *pb.h \
		libfips.sym fips-find-lib-64 fips-find-lib-32 libfips-64.so libfips-32.so \
		$(LIB64_DIR)/libGL.so.1 $(LIB32_DIR)/libGL.so.1

DISTCLEAN := $(DISTCLEAN) .first-build-message Makefile.config

DEPS := $(SRCS:%.c=.deps/%.d)

-include $(DEPS)

.PHONY: check-syntax makecheck
check-syntax:
	$(CC) $(CFLAGS) -Wall -Wextra -fsyntax-only $(CHK_SOURCES)

makecheck:
	@echo libfips_srcs: $(libfips_srcs)
	@echo ALL_TARGETS: $(ALL_TARGETS)
	@echo grafips_64_modules: $(grafips_64_modules)
	@echo grafips_srcs: $(grafips_srcs)
	@echo make_locals: $(make_locals)
