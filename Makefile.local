# -*- makefile -*-

# Here's the (hopefully simple) versioning scheme.
#
# Releases of fips have a two-digit version (0.1, 0.2, etc.). We
# increment the second digit for each release and increment the first
# digit when we reach particularly major milestones of usability.
#
# Between releases, (such as when compiling fips from the git
# repository), we let git append identification of the actual commit.
PACKAGE=fips

IS_GIT=$(shell if [ -d .git ] ; then echo yes ; else echo no; fi)

ifeq ($(IS_GIT),yes)
DATE:=$(shell git log --date=short -1 --pretty=format:%cd)
else
DATE:=$(shell date +%F)
endif

VERSION:=$(shell cat ${srcdir}/version)
ifeq ($(filter release release-message pre-release, $(MAKECMDGOALS)),)
ifeq ($(IS_GIT),yes)
VERSION:=$(shell git describe --match '[0-9.]*' 2>/dev/null | sed -e s/_/~/ -e s/-/+/ -e s/-/~/)
endif
endif

UPSTREAM_TAG=$(subst ~,_,$(VERSION))
DEB_TAG=debian/$(UPSTREAM_TAG)-1

RELEASE_HOST=cworth.org
RELEASE_DIR=/home/cworth/public_html/fips/releases
RELEASE_URL=http://cworth.org/fips/releases
TAR_FILE=$(PACKAGE)-$(VERSION).tar.gz
DEB_TAR_FILE=$(PACKAGE)_$(VERSION).orig.tar.gz
SHA1_FILE=$(TAR_FILE).sha1
GPG_FILE=$(SHA1_FILE).asc

# Smash together user's values with our extra values
FINAL_CFLAGS = -DFIPS_VERSION=$(VERSION) $(CFLAGS) $(WARN_CFLAGS) $(CONFIGURE_CFLAGS) $(extra_cflags)
FINAL_FIPS_LDFLAGS = $(LDFLAGS) $(AS_NEEDED_LDFLAGS) $(TALLOC_LDFLAGS)
FINAL_FIPS_LINKER = CC
ifneq ($(LINKER_RESOLVES_LIBRARY_DEPENDENCIES),1)
FINAL_FIPS_LDFLAGS += $(CONFIGURE_LDFLAGS)
endif
ifeq ($(LIBDIR_IN_LDCONFIG),0)
FINAL_FIPS_LDFLAGS += $(RPATH_LDFLAGS)
endif

.PHONY: all
all: fips
ifeq ($(MAKECMDGOALS),)
ifeq ($(shell cat .first-build-message 2>/dev/null),)
	@FIPS_FIRST_BUILD=1 $(MAKE) --no-print-directory all
	@echo ""
	@echo "Compilation of fips is now complete. You can install fips with:"
	@echo ""
	@echo "	make install"
	@echo ""
	@echo "Note that depending on the prefix to which you are installing"
	@echo "you may need root permission (such as \"sudo make install\")."
	@echo "See \"./configure --help\" for help on setting an alternate prefix."
	@echo Printed > .first-build-message
endif
endif

$(TAR_FILE):
	if git tag -v $(VERSION) >/dev/null 2>&1; then \
           ref=$(VERSION); \
        else \
           ref="HEAD" ; \
	   echo "Warning: No signed tag for $(VERSION)"; \
	fi ; \
	git archive --format=tar --prefix=$(PACKAGE)-$(VERSION)/ $$ref > $(TAR_FILE).tmp
	echo $(VERSION) > version.tmp
	tar --append -f $(TAR_FILE).tmp --transform s_^_$(PACKAGE)-$(VERSION)/_  --transform 's_.tmp$$__' version.tmp
	rm version.tmp
	gzip < $(TAR_FILE).tmp > $(TAR_FILE)
	@echo "Source is ready for release in $(TAR_FILE)"

$(SHA1_FILE): $(TAR_FILE)
	sha1sum $^ > $@

$(GPG_FILE): $(SHA1_FILE)
	@echo "Please enter your GPG password to sign the checksum."
	gpg --armor --sign $^ 

.PHONY: dist
dist: $(TAR_FILE)

.PHONY: test
test:
	@echo "FIXME: Should consider adding a test suite here."

# We invoke make recursively only to force ordering of our phony
# targets in the case of parallel invocation of make (-j).
#
# We carefully ensure that our VERSION variable is passed down to any
# sub-ordinate make invocations (which won't otherwise know that they
# are part of the release and need to take the version from the
# version file).
.PHONY: release
release: verify-source-tree-and-version
	$(MAKE) VERSION=$(VERSION) verify-newer
	$(MAKE) VERSION=$(VERSION) clean
	$(MAKE) VERSION=$(VERSION) test
	git tag -s -m "$(PACKAGE) $(VERSION) release" $(UPSTREAM_TAG)
	$(MAKE) VERSION=$(VERSION) $(GPG_FILE)
	ln -sf $(TAR_FILE) $(DEB_TAR_FILE)
	pristine-tar commit $(DEB_TAR_FILE) $(UPSTREAM_TAG)
	git tag -s -m "$(PACKAGE) Debian $(VERSION)-1 upload (same as $(VERSION))" $(DEB_TAG)
	mkdir -p releases
	mv $(TAR_FILE) $(SHA1_FILE) $(GPG_FILE) releases
	$(MAKE) VERSION=$(VERSION) release-message > $(PACKAGE)-$(VERSION).announce
ifeq ($(REALLY_UPLOAD),yes)
	git push origin $(VERSION)
	cd releases && scp $(TAR_FILE) $(SHA1_FILE) $(GPG_FILE) $(RELEASE_HOST):$(RELEASE_DIR)
	ssh $(RELEASE_HOST) "rm -f $(RELEASE_DIR)/LATEST-$(PACKAGE)-* ; ln -s $(TAR_FILE) $(RELEASE_DIR)/LATEST-$(TAR_FILE)"
endif
	@echo "Please send a release announcement using $(PACKAGE)-$(VERSION).announce as a template."

.PHONY: pre-release
pre-release:
	$(MAKE) VERSION=$(VERSION) clean
	$(MAKE) VERSION=$(VERSION) test
	git tag -s -m "$(PACKAGE) $(VERSION) release" $(UPSTREAM_TAG)
	git tag -s -m "$(PACKAGE) Debian $(VERSION)-1 upload (same as $(VERSION))" $(DEB_TAG)
	$(MAKE) VERSION=$(VERSION) $(TAR_FILE)
	ln -sf $(TAR_FILE) $(DEB_TAR_FILE)
	pristine-tar commit $(DEB_TAR_FILE) $(UPSTREAM_TAG)
	mkdir -p releases
	mv $(TAR_FILE) $(DEB_TAR_FILE) releases

.PHONY: debian-snapshot
debian-snapshot:
	make VERSION=$(VERSION) clean
	TMPFILE=$$(mktemp /tmp/fips.XXXXXX);		\
	  cp debian/changelog $${TMPFILE};		\
	  EDITOR=/bin/true dch -b -v $(VERSION)+1	\
	    -D UNRELEASED 'test build, not for upload';	\
	  echo '3.0 (native)' > debian/source/format; 	\
	  debuild -us -uc;				\
	  mv -f $${TMPFILE} debian/changelog;		\
	  echo '3.0 (quilt)' > debian/source/format

.PHONY: release-message
release-message:
	@echo "To: XXX"
	@echo "Subject: $(PACKAGE) release $(VERSION) now available"
	@echo ""
	@echo "Where to obtain fips $(VERSION)"
	@echo "==========================="
	@echo "  $(RELEASE_URL)/$(TAR_FILE)"
	@echo ""
	@echo "Which can be verified with:"
	@echo ""
	@echo "  $(RELEASE_URL)/$(SHA1_FILE)"
	@echo -n "  "
	@cat releases/$(SHA1_FILE)
	@echo ""
	@echo "  $(RELEASE_URL)/$(GPG_FILE)"
	@echo "  (signed by `getent passwd "$$USER" | cut -d: -f 5 | cut -d, -f 1`)"
	@echo ""
	@echo "What's new in fips $(VERSION)"
	@echo "========================="
	@sed -ne '/^[Ff]ips $(VERSION)/{n;n;b NEWS}; d; :NEWS /^===/q; {p;n;b NEWS}' < NEWS | head -n -2
	@echo ""
	@echo "What is fips"
	@echo "============"
	@echo "Fips is a program for monitoring performance of OpenGL applications"

# This is a chain of dependencies rather than a simple list simply to
# avoid the messages getting interleaved in the case of a parallel
# make invocation.
.PHONY: verify-source-tree-and-version
verify-source-tree-and-version: verify-no-dirty-code

.PHONY: verify-no-dirty-code
verify-no-dirty-code:
ifeq ($(IS_GIT),yes)
	@printf "Checking that source tree is clean..."
ifneq ($(shell git ls-files -m),)
	@echo "No"
	@echo "The following files have been modified since the most recent git commit:"
	@echo ""
	@git ls-files -m
	@echo ""
	@echo "The release will be made from the committed state, but perhaps you meant"
	@echo "to commit this code first? Please clean this up to make it more clear."
	@false
else
	@echo "Good"
endif
endif

.PHONY: verify-newer
verify-newer:
	@echo -n "Checking that no $(VERSION) release already exists..."
	@wget -q -O /dev/null $(RELEASE_URL)/$(TAR_FILE) ; \
	case $$? in \
          8) echo "Good." ;; \
          0) echo "Ouch."; \
	     echo "Found: $(RELEASE_URL)/$(TAR_FILE)"; \
	     echo "Refusing to replace an existing release."; \
	     echo "Don't forget to update \"version\" as described in RELEASING before release." ; \
	     false ;; \
	  *) echo "An unexpected error occured"; \
	     false;; esac

# The user has not set any verbosity, default to quiet mode and inform the
# user how to enable verbose compiles.
ifeq ($(V),)
quiet_DOC := "Use \"$(MAKE) V=1\" to see the verbose compile lines.\n"
quiet = @printf $(quiet_DOC)$(eval quiet_DOC:=)"$1 $@\n"; $($(shell echo $1 | sed -e s'/ .*//'))
endif
# The user has explicitly enabled quiet compilation.
ifeq ($(V),0)
quiet = @printf "$1 $@\n"; $($(shell echo $1 | sed -e s'/ .*//'))
endif
# Otherwise, print the full command line.
quiet ?= $($(shell echo $1 | sed -e s'/ .*//'))

%.o: %.c $(global_deps)
	@mkdir -p .deps/$(@D)
	$(call quiet,CC $(CFLAGS)) -c $(FINAL_CFLAGS) $< -o $@ -MD -MP -MF .deps/$*.d

.PHONY : clean
clean:
	rm -rf $(CLEAN); rm -rf .deps

.PHONY: distclean
distclean: clean
	rm -rf $(DISTCLEAN)

fips_srcs = \
	fips.c

fips_modules = $(fips_srcs:.c=.o)

fips: $(fips_modules)
	$(call quiet,$(FINAL_FIPS_LINKER) $(CFLAGS)) $^ $(FINAL_FIPS_LDFLAGS) -o $@

.PHONY: install
install: all
	mkdir -p $(DESTDIR)$(prefix)/bin/
	install fips $(DESTDIR)$(prefix)/bin/fips
ifeq ($(MAKECMDGOALS), install)
	@echo ""
	@echo "Fips is now installed to $(DESTDIR)$(prefix)"
	@echo ""
endif

SRCS  := $(SRCS) $(fips_srcs)
CLEAN := $(CLEAN) fips $(fips_modules)

DISTCLEAN := $(DISTCLEAN) .first-build-message Makefile.config

DEPS := $(SRCS:%.c=.deps/%.d)
DEPS := $(DEPS:%.cc=.deps/%.d)
-include $(DEPS)
