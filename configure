#! /bin/sh

PROJECT=fips
PROJECT_BLURB="a program for monitoring performance of OpenGL applications"

# Test whether this shell is capable of parameter substring processing.
( option='a/b'; : ${option#*/} ) 2>/dev/null || {
    echo "
The shell interpreting '$0' is lacking some required features.

To work around this problem you may try to execute:

    ksh $0 $*
 or
    bash $0 $*
"
    exit 1
}

# Store original IFS value so it can be changed (and restored) in many places.
readonly DEFAULT_IFS="$IFS"

srcdir=$(dirname "$0")

# For a non-srcdir configure invocation (such as ../configure), create
# the directory structure and copy Makefiles.
if [ "$srcdir" != "." ]; then

    for dir in . $(grep "^subdirs *=" "$srcdir"/Makefile | sed -e "s/subdirs *= *//"); do
	mkdir -p "$dir"
	cp "$srcdir"/"$dir"/Makefile.local "$dir"
	cp "$srcdir"/"$dir"/Makefile "$dir"
    done
fi

# Set several defaults (optionally specified by the user in
# environment variables)
CC=${CC:-gcc}
CFLAGS=${CFLAGS:--O2}
LDFLAGS=${LDFLAGS:-}

# Set the defaults for values the user can specify with command-line
# options.
PREFIX=/usr/local

usage ()
{
    cat <<EOF
Usage: ./configure [options]...

This script configures ${PROJECT} to build on your system.

It verifies that dependencies are available, determines flags needed
to compile and link against various required libraries, and identifies
whether various system functions can be used or if locally-provided
replacements will be built instead.

Finally, it allows you to control various aspects of the build and
installation process.

First, some common variables can specified via environment variables:

	CC		The C compiler to use
	CFLAGS		Flags to pass to the C compiler
	LDFLAGS		Flags to pass when linking

Each of these values can further be controlled by specifying them
later on the "make" command line.

Additionally, various options can be specified on the configure
command line.

	--prefix=PREFIX	Install files in PREFIX [$PREFIX]

By default, "make install" will install the resulting program to
$PREFIX/bin, documentation to $PREFIX/man, etc. You can
specify an installation prefix other than $PREFIX using
--prefix, for instance:

	./configure --prefix=\$HOME

Fine tuning of some installation directories is available:

	--bindir=DIR		Install executables to DIR [PREFIX/bin]
	--libdir=DIR		Install libraries to DIR [PREFIX/lib]
	--mandir=DIR		Install man pages to DIR [PREFIX/share/man]
	--sysconfdir=DIR	Read-only single-machine data [PREFIX/etc]

Additional options are accepted for compatibility with other
configure-script calling conventions, but don't do anything yet:

	--build=<cpu>-<vendor>-<os>	Currently ignored
	--host=<cpu>-<vendor>-<os>	Currently ignored
	--infodir=DIR			Currently ignored
	--datadir=DIR			Currently ignored
	--localstatedir=DIR		Currently ignored
	--libexecdir=DIR		Currently ignored
	--disable-maintainer-mode	Currently ignored
	--disable-dependency-tracking	Currently ignored

EOF
}

# Given two absolute paths ("from" and "to"), compute a relative path
# from "from" to "to". For example:
#
#	relative_path /foo/bar/baz /foo/qux -> ../../qux
relative_path ()
{
    if [ $# -ne 2 ] ; then
	echo "Internal error: relative_path requires exactly 2 arguments"
	exit 1;
    fi

    from="$1"
    to="$2"

    # Handle trivial case up-front
    if [ "$from" = "$to" ] ; then
	echo ""
    else
	shared="$from"
	relative=""

	while [ "${to#$shared}" = "$to" ] && [ "$shared" != "." ] ; do
	    shared="$(dirname $shared)"
	    relative="..${relative:+/${relative}}"
	done

	echo "${relative:-.}${to#$shared}"
    fi
}

# Parse command-line options
for option; do
    if [ "${option}" = '--help' ] ; then
	usage
	exit 0
    elif [ "${option%%=*}" = '--prefix' ] ; then
	PREFIX="${option#*=}"
    elif [ "${option%%=*}" = '--bindir' ] ; then
	BINDIR="${option#*=}"
    elif [ "${option%%=*}" = '--libdir' ] ; then
	LIBDIR="${option#*=}"
    elif [ "${option%%=*}" = '--mandir' ] ; then
	MANDIR="${option#*=}"
    elif [ "${option%%=*}" = '--sysconfdir' ] ; then
	SYSCONFDIR="${option#*=}"
    elif [ "${option%%=*}" = '--build' ] ; then
	true
    elif [ "${option%%=*}" = '--host' ] ; then
	true
    elif [ "${option%%=*}" = '--infodir' ] ; then
	true
    elif [ "${option%%=*}" = '--datadir' ] ; then
	true
    elif [ "${option%%=*}" = '--localstatedir' ] ; then
	true
    elif [ "${option%%=*}" = '--libexecdir' ] ; then
	true
    elif [ "${option}" = '--disable-maintainer-mode' ] ; then
	true
    elif [ "${option}" = '--disable-dependency-tracking' ] ; then
	true
    else
	echo "Unrecognized option: ${option}"
	echo "See:"
	echo "	$0 --help"
	echo ""
	exit 1
    fi
done

cat <<EOF
Welcome to ${PROJECT}, ${PROJECT_BLURB}

We hope that the process of building and installing ${PROJECT} is quick
and smooth.

If anything goes wrong in the configure process, you can override any
decisions it makes by manually editing the Makefile.config file that
it creates. Also please do as much as you can to figure out what could
be different on your machine compared to those of the ${PROJECT}
developers. Then, please email those details to the ${PROJECT} developers so
that they can hopefully make future versions of ${PROJECT} easier for you to
use.

We'll now investigate your system to verify that all required
dependencies are available:

EOF

errors=0

printf "Checking for pkg-config... "
if pkg-config --version > /dev/null 2>&1; then
    printf "Yes.\n"
else
    printf "No.\n"
    cat <<EOF

*** Error: This configure script requires pkg-config to find the
compilation flags required to link against the various libraries
needed by ${PROJECT}. The pkg-config program can be obtained from:

	http://www.freedesktop.org/wiki/Software/pkg-config/

Or you may be able install it with a command such as:

	sudo apt-get install pkg-config
    or:
	sudo yum install pkgconfig

EOF

exit 1

fi

printf "Checking for working C compiler (${CC})... "
printf "int main(void){return 42;}\n" > minimal.c
if ${CC} -o minimal minimal.c > /dev/null 2>&1
then
    printf "Yes.\n"
else
    printf "No.\n"
    cat <<EOF

*** Error: No functioning C compiler found. Either set the CC environment
to a working C compiler, or else install gcc:

	http://gcc.gnu.org/

You may be able to install gcc with a command such as:

	sudo apt-get install build-essential
    or:
	sudo yum install make automake gcc gcc-c++ kernel-devel

EOF

exit 1

fi

printf "Checking for libtalloc... "
if pkg-config --exists talloc; then
    printf "Yes.\n"
    have_talloc=1
    talloc_cflags=$(pkg-config --cflags talloc)
    talloc_ldflags=$(pkg-config --libs talloc)
else
    printf "No.\n"
    have_talloc=0
    talloc_cflags=
    errors=$((errors + 1))
fi

printf "Checking for libelf... "
printf "#include <gelf.h>\nint main(void){return elf_version (EV_CURRENT);}\n" > elf-minimal.c
if ${CC} -o elf-minimal elf-minimal.c -lelf > /dev/null 2>&1
then
    printf "Yes.\n"
    have_libelf=1
    libelf_cflags=
    libelf_ldflags=-lelf
else
    printf "No.\n"
    have_libelf=0
    libelf_cflags=
    libelf_ldflags=
    errors=$((errors + 1))
fi
rm -f elf-minimal elf-minimal.c

printf "Checking for GL/gl.h... "
have_gl=0
if pkg-config --exists gl; then
    printf "Yes.\n"
    have_gl=1
    gl_cflags=$(pkg-config --cflags gl)
    gl_ldflags=$(pkg-config --libs gl)
else
    printf"No.\n"
    have_gl=0
    errors=$((errors + 1))
fi

printf "Checking for GL window-system-binding headers:\n"
have_gl_winsys=0

printf "	Checking for GL/glx.h... "
have_glx=No
printf "#include <GL/glx.h>\nint main(void){return 0;}\n" > glx-minimal.c
if ${CC} -o glx-minimal glx-minimal.c ${gl_cflags} > /dev/null 2>&1
then
    printf "Yes.\n"
    have_gl_winsys=1
    have_glx=Yes
else
    printf "No.\n"
fi
rm -f glx-minimal glx-minimal.c

if [ $have_gl_winsys -eq 0 ]; then
    errors=$((errors + 1))
fi

printf "	Checking for X11... "
have_x11=No
if pkg-config --exists x11; then
  printf "Yes.\n"
  have_x11=Yes
  x11_cflags=$(pkg-config --cflags x11)
  x11_ldflags=$(pkg-config --libs x11)
else
  printf "No.\n"
fi

printf "	Checking for EGL/egl.h... "
have_egl=No
if pkg-config --exists egl; then
    printf "Yes.\n"
    have_egl=Yes
    egl_cflags=$(pkg-config --cflags egl)
    egl_ldflags=$(pkg-config --libs egl)
else
    printf "No.\n"
fi

printf "	Checking for GLESv2... "
have_glesv2=No
if pkg-config --exists glesv2; then
    printf "Yes.\n"
    have_glesv2=Yes
    glesv2_cflags=$(pkg-config --cflags glesv2)
    glesv2_ldflags=$(pkg-config --libs glesv2)
else
    printf "No.\n"
fi

printf "int main(void){return 0;}\n" > minimal.c

WARN_CFLAGS=""
printf "Checking for available C compiler warning flags:\n"
for flag in -Wall -Wextra -Wmissing-declarations; do
    if ${CC} $flag -o minimal minimal.c > /dev/null 2>&1
    then
	WARN_CFLAGS="${WARN_CFLAGS}${WARN_CFLAGS:+ }${flag}"
    fi
done
printf "\t${WARN_CFLAGS}\n"

rm -f minimal minimal.c

printf "#include <features.h>\nint main(void){return 0;}\n" > arch-minimal.c

printf "Checking for machine-dependent compiler support:\n"

printf "	Compiler can create 32-bit binaries... "
have_m32=Yes
if ${CC} -m32 -o arch-minimal arch-minimal.c > /dev/null 2>&1
then
    printf "Yes.\n"
else
    printf "No.\n"
    have_m32=No
fi

printf "	Compiler can create 64-bit binaries... "
have_m64=Yes
if ${CC} -m64 -o arch-minimal arch-minimal.c > /dev/null 2>&1
then
    printf "Yes.\n"
else
    printf "No.\n"
    have_m64=No
fi

if [ "$have_m32" = "No" ] || [ "$have_m64" = "No" ]; then
    cat <<EOF

* Warning: Cannot create both 32 and 64-bit fips libraries. Fips will not
           support applications of the non-native size. Fixing this may be
           as simple as running a command such as:

		sudo apt-get install gcc-multilib
EOF
fi

rm -f arch-minimal arch-minimal.c

if [ $errors -gt 0 ]; then
    cat <<EOF

*** Error: The dependencies of ${PROJECT} could not be satisfied. You will
need to install the following packages before being able to compile
${PROJECT}:

EOF
    if [ $have_talloc -eq 0 ]; then
	echo "	The talloc library (including development files such as headers)"
	echo "	http://talloc.samba.org/"
	echo
    fi
    if [ $have_libelf -eq 0 ]; then
	echo "	The libelf library (including development files such as headers)"
	echo "	http://http://sourceforge.net/projects/elftoolchain/"
	echo
    fi
    if [ $have_gl -eq 0 ]; then
	echo "	Open GL header files (GL/gl.h)"
	echo "	http://www.mesa3d.org/"
	echo
    fi
    if [ $have_gl_winsys -eq 0 ]; then
	echo "	OpenGL window-system-bindings header files (GL/glx.h and/or GL/egl.h)"
	echo "	http://www.mesa3d.org/"
	echo
    fi
    cat <<EOF
With any luck, you're using a modern, package-based operating system
that has all of these packages available in the distribution. In that
case a simple command will install everything you need. For example:

On Debian and similar systems:

	sudo apt-get install libtalloc-dev libelf-dev \\
	libgl1-mesa-dev libgles2-mesa-dev

Or on Fedora and similar systems:

	sudo yum install libtalloc-devel libelf-devel \\
	mesa-libGL-devel mesa-libGLES-devel

On other systems, similar commands can be used, but the details of the
package names may be different.

When you have installed the necessary dependencies, you can run
configure again to ensure the packages can be found, or simply run
"make" to compile.

EOF
    exit 1
fi

cat <<EOF

All required packages were found.

The following OpenGL window-system bindings will be supported:

	GLX: ${have_glx}
	EGL: ${have_egl}

You may now run the following commands to compile and install ${PROJECT}:

	make
	sudo make install

EOF

# construct the Makefile.config
cat > Makefile.config <<EOF
# This Makefile.config was automatically generated by the ./configure
# script of ${PROJECT}. If the configure script identified anything
# incorrectly, then you can edit this file to try to correct things,
# but be warned that if configure is run again it will destroy your
# changes, (and this could happen by simply calling "make" if the
# configure script is updated).

# The top-level directory for the source, (the directory containing
# the configure script). This may be different than the build
# directory (the current directory at the time configure was run).
srcdir = ${srcdir}

configure_options = $@

# We use vpath directives (rather than the VPATH variable) since the
# VPATH variable matches targets as well as prerequisites, (which is
# not useful since then a target left-over from a srcdir build would
# cause a target to not be built in the non-srcdir build).
#
# Also, we don't use a single "vpath % \$(srcdir)" here because we
# don't want the vpath to trigger for our emacs lisp compilation,
# (unless we first find a way to convince emacs to build the .elc
# target in a directory other than the directory of the .el
# prerequisite). In the meantime, we're actually copying in the .el
# files, (which is quite ugly).
vpath %.c \$(srcdir)
vpath %.cc \$(srcdir)
vpath %.1 \$(srcdir)
vpath Makefile.% \$(srcdir)

# The C compiler to use
CC = ${CC}

# Default FLAGS for C compiler (can be overridden by user such as "make CFLAGS=-g")
CFLAGS = ${CFLAGS}

# Default FLAGS for the linker (can be overridden by user such as "make LDFLAGS=-znow")
LDFLAGS = ${LDFLAGS}

# Flags to enable warnings when using the C compiler
WARN_CFLAGS=${WARN_CFLAGS}

# The prefix to which ${PROJECT} should be installed
prefix = ${PREFIX}

# The directory to which executables should be installed
bindir = ${BINDIR:=\$(prefix)/bin}

# The directory to which libraries should be installed
libdir = ${LIBDIR:=\$(prefix)/lib}

# The directory to which man pages should be installed
mandir = ${MANDIR:=\$(prefix)/share/man}

# The directory to which read-only (configuration) files should be installed
sysconfdir = ${SYSCONFDIR:=\$(prefix)/etc}

# Whether compiler can create 32 or 64-bit binaries
COMPILER_SUPPORTS_32 = ${have_m32}
COMPILER_SUPPORTS_64 = ${have_m64}

# Flags needed to compile and link against talloc
TALLOC_CFLAGS = ${talloc_cflags}
TALLOC_LDFLAGS = ${talloc_ldflags}

# Flags needed to compile and link against libelf
LIBELF_CFLAGS = ${libelf_cflags}
LIBELF_LDFLAGS = ${libelf_ldflags}

# Whether GLX headers are available
HAVE_GLX = ${have_glx}

# Flags needed to compile and link against libGL
GL_CFLAGS = ${gl_cflags}
GL_LDFLAGS = ${gl_ldflags}

# Whether X11 headers and library are available
HAVE_X11 = ${have_x11}

# Flags needed to compile and link against libX11
X11_CLFLAGS = ${x11_cflags}
X11_LDFLAGS = ${x11_ldflags}

# Whether EGL headers are available
HAVE_EGL = ${have_egl}

# Flags needed to find EGL header files (EGL/egl.h)
EGL_CFLAGS = ${egl_cflags}
EGL_LDFLAGS = ${egl_ldflags}

# Whether GLESv2 headers and library are available
HAVE_GLESV2 = ${have_glesv2}

# Flags needed to compile and link against GLESv2
GLESV2_CFLAGS = ${glesv2_cflags}
GLESV2_LDFLAGS = ${glesv2_ldflags}

# Flags needed to have linker link only to necessary libraries
AS_NEEDED_LDFLAGS = ${as_needed_ldflags}
EOF

# construct config.h
cat > config.h <<EOF
/* Generated by configure. */

/* Relative path from ${BINDIR} to ${LIBDIR}/fips */
#define BINDIR_TO_LIBFIPSDIR "$(relative_path ${BINDIR} ${LIBDIR})/fips"
EOF
